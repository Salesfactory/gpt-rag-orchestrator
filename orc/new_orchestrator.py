import os
import logging
import base64
import tiktoken
import uuid
from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver
from orc.agent import create_agent
from shared.cosmos_db import (
    get_conversation_data
)

# logging level
logging.getLogger("azure").setLevel(logging.WARNING)
logging.getLogger("azure.cosmos").setLevel(logging.WARNING)
LOGLEVEL = os.environ.get("LOGLEVEL", "DEBUG").upper()
logging.basicConfig(level=LOGLEVEL)

async def run(conversation_id, ask, url, client_principal):
    # conversation_id="804f987c-0210-447a-9f63-c215f1b5543b" # hardcoded for testing

    if conversation_id is None or conversation_id == "":
        conversation_id = str(uuid.uuid4())
        logging.info(
            f"[orchestrator] {conversation_id} conversation_id is Empty, creating new conversation_id."
        )

    model = ChatOpenAI(model_name="gpt-4o", temperature=0.3)
    mini_model = ChatOpenAI(model="gpt-4o-mini", temperature=0)

    # conversation_data = get_conversation_data(conversation_id)
    # memory_data_string = conversation_data["memory_data"]

    # memory
    memory = MemorySaver()
    # decoded_data = base64.b64decode("")
    # json_data = memory.serde.loads(decoded_data)
    # memory.put(
    #     config=json_data[0], checkpoint=json_data[1], metadata=json_data[2]
    # )

    # create agent
    agent_executor = create_agent(
        model, 
        mini_model, 
        checkpointer=memory,
        verbose=True
    )

    # config
    config = {"configurable": {"thread_id": conversation_id}}

    # print("LOADED MEMOORY:", memory.get_tuple(config))

    # agent response
    response = agent_executor.invoke(
        {"question": ask},
        config,
    )

    # Final generation
    logging.info(
        f"[orchestrator] {conversation_id} agent response: {response['generation'][:50]}"
    )


    # memory serialization
    _tuple = memory.get_tuple(config)
    serialized_data = memory.serde.dumps(_tuple)
    byte_string = base64.b64encode(serialized_data)
    b64_tosave = byte_string.decode("utf-8")

    # print(b64_tosave)
    # print(_tuple)

    return { "response": response["generation"] }
